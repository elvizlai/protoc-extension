// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceDescriptor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceDescriptorMultiError, or nil if none found.
func (m *ServiceDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServiceDescriptorMultiError(errors)
	}
	return nil
}

// ServiceDescriptorMultiError is an error wrapping multiple validation errors
// returned by ServiceDescriptor.ValidateAll() if the designated constraints
// aren't met.
type ServiceDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceDescriptorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceDescriptorMultiError) AllErrors() []error { return m }

// ServiceDescriptorValidationError is the validation error returned by
// ServiceDescriptor.Validate if the designated constraints aren't met.
type ServiceDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDescriptorValidationError) ErrorName() string {
	return "ServiceDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDescriptorValidationError{}

// Validate checks the field values on ResourceDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDescriptor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDescriptor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDescriptorMultiError, or nil if none found.
func (m *ResourceDescriptor) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDescriptor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceDescriptorValidationError{
					field:  "In",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceDescriptorValidationError{
					field:  "In",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceDescriptorValidationError{
				field:  "In",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceDescriptorMultiError(errors)
	}
	return nil
}

// ResourceDescriptorMultiError is an error wrapping multiple validation errors
// returned by ResourceDescriptor.ValidateAll() if the designated constraints
// aren't met.
type ResourceDescriptorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDescriptorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDescriptorMultiError) AllErrors() []error { return m }

// ResourceDescriptorValidationError is the validation error returned by
// ResourceDescriptor.Validate if the designated constraints aren't met.
type ResourceDescriptorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDescriptorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDescriptorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDescriptorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDescriptorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDescriptorValidationError) ErrorName() string {
	return "ResourceDescriptorValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDescriptorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDescriptor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDescriptorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDescriptorValidationError{}

// Validate checks the field values on ResourceDescriptor_In with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDescriptor_In) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDescriptor_In with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDescriptor_InMultiError, or nil if none found.
func (m *ResourceDescriptor_In) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDescriptor_In) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLogMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResourceDescriptor_InValidationError{
					field:  "LogMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResourceDescriptor_InValidationError{
					field:  "LogMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResourceDescriptor_InValidationError{
				field:  "LogMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResourceDescriptor_InMultiError(errors)
	}
	return nil
}

// ResourceDescriptor_InMultiError is an error wrapping multiple validation
// errors returned by ResourceDescriptor_In.ValidateAll() if the designated
// constraints aren't met.
type ResourceDescriptor_InMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDescriptor_InMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDescriptor_InMultiError) AllErrors() []error { return m }

// ResourceDescriptor_InValidationError is the validation error returned by
// ResourceDescriptor_In.Validate if the designated constraints aren't met.
type ResourceDescriptor_InValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDescriptor_InValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDescriptor_InValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDescriptor_InValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDescriptor_InValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDescriptor_InValidationError) ErrorName() string {
	return "ResourceDescriptor_InValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDescriptor_InValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDescriptor_In.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDescriptor_InValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDescriptor_InValidationError{}

// Validate checks the field values on ResourceDescriptor_Out with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResourceDescriptor_Out) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceDescriptor_Out with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResourceDescriptor_OutMultiError, or nil if none found.
func (m *ResourceDescriptor_Out) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceDescriptor_Out) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResourceDescriptor_OutMultiError(errors)
	}
	return nil
}

// ResourceDescriptor_OutMultiError is an error wrapping multiple validation
// errors returned by ResourceDescriptor_Out.ValidateAll() if the designated
// constraints aren't met.
type ResourceDescriptor_OutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceDescriptor_OutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceDescriptor_OutMultiError) AllErrors() []error { return m }

// ResourceDescriptor_OutValidationError is the validation error returned by
// ResourceDescriptor_Out.Validate if the designated constraints aren't met.
type ResourceDescriptor_OutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceDescriptor_OutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceDescriptor_OutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceDescriptor_OutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceDescriptor_OutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceDescriptor_OutValidationError) ErrorName() string {
	return "ResourceDescriptor_OutValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceDescriptor_OutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceDescriptor_Out.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceDescriptor_OutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceDescriptor_OutValidationError{}
